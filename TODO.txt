Gloriosa est un framework basé en C# pouvant être utilisé pour créer un danmaku de toute pièce.

L'idée principale: Tout GameObject appartient à un monde séparé et aucun GameObject ne peut interragir avec d'autres mondes.
Il peut exister des GameObject qui n'appartiennent pas à un monde, mais ils n'ont aucune collision et fonctionnalité de monde.
Si il n'existe qu'un seul monde, le framework prend en charge ça et spawn un GameObject sans constructeur de worldID dans le seul monde.

TOUT est un gameobject, sauf les worlds et les différentes "Views" (stages principalement)

Le framework se comporte comme ça :
- Initialisation de la fenêtre et de tout le moteur.
- Une fois initialisé, AppFrame invoke un event, laissant le dev utiliser le framework normalement.


Le framework comporte la possibilité de créer des Worlds (aucun maximum), définir leur dimensions séparément
Créer des menus, principalement fait pour le menu d'accueil mais fonctionne aussi pour les menus de pause et tout.
Créer des gameobjects et définir leur comportement avec les fonctions overridables.
Une class Player de base mais optionnelle, mais avec une interface pour les fonctions et valeurs nécessaire d'un joueur.


Permettre un Wrapper entier pour toutes les fonctions de l'api et des facilités pour Render et tout


Revoir la manière dont le rendering est fait, y'a trop de call et pas assez de flexibilité.
Un monde doit rendre ses propres objets, mais il devrait y avoir une méthode genre "setviewmode" pour changer le rendering.
Setviewmodes:
- Backgrounds (background en 3D, rendu dans la caméra 3D)
- Worlds (Rend les objets dans les worlds)
- UI (rend l'UI, au dessus de tout et a son propre ordre de layer)
Changer le SetViewMode ça change la position de base et l'ordre de rendu.
Background sera rendu toujours en bas, world au milieu et UI tout en haut.
Donc, les layers d'objets sont confinées dans leur viewmode.
Pour render, c'est par sorting qui sera fait chaque call de "SetViewMode". Changer le ViewMode se fait uniquement dans le render scope.
Changer la layer peut se faire dans tous les scopes.


Le rendering c'est comme ça :
La View est le contenant de tout ce qui est à render, ça peut être un menu, un stage, tout.
- Dans la View y'a, par ordre de render:
-- Le Background, render avec une camera 3D
-- Les Worlds, render avec la camera 2D virtuelle.
-- L'UI, render avec la camera 2D virtuelle.

Une View contient son propre pool de Resource, de GameObject, et gère sa propre logique d'Update.
Charger une View kill (remplace) l'ancienne instance de l'ancienne View, libère toutes ses resources et Del tout les GameObjects.
(Le Pool de resource d'une View est locale, il y a aussi un pool de resource global)

- Créer une méthode pour créer des objets différemment.
* View.CreateGM();
* World.CreateGM(worldID);